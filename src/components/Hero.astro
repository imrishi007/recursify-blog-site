---
// You might need to import blogPosts if this Hero component is standalone
// and not within a layout that already imports it.
// Assuming blogPosts is available globally or through a parent layout/component,
// but for self-containment, adding the import here as well.
import { blogPosts } from '../data/blogPosts.js';
---

<section class="hero" id="hero">
  <div class="hero-container">
    <div class="hero-content parallax" data-speed="0.3">
      <div class="hero-logo animate-on-scroll">
        <svg width="120" height="120" viewBox="0 0 120 120" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M60 10L100 35L100 85L60 110L20 85L20 35L60 10Z" stroke="url(#heroGradient)" stroke-width="3" fill="none"/>
          <path d="M60 25L85 40L85 80L60 95L35 80L35 40L60 25Z" stroke="url(#heroGradient)" stroke-width="2" fill="rgba(59,130,246,0.1)"/>
          <path d="M60 40L70 46L70 74L60 80L50 74L50 46L60 40Z" stroke="url(#heroGradient)" stroke-width="1.5" fill="rgba(20,184,166,0.1)"/>
          <defs>
            <linearGradient id="heroGradient" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" style="stop-color:#3b82f6;stop-opacity:1" />
              <stop offset="50%" style="stop-color:#14b8a6;stop-opacity:1" />
              <stop offset="100%" style="stop-color:#8b45ff;stop-opacity:1" />
            </linearGradient>
          </defs>
        </svg>
      </div>

      <h1 class="hero-title animate-on-scroll">
        <span class="gradient-text">RECURSIFY</span>
      </h1>

      <p class="hero-tagline animate-on-scroll">
        DSA MADE SIMPLE
      </p>

      <p class="hero-description animate-on-scroll">
        Master Data Structures and Algorithms through clear explanations,
        visual examples, and step-by-step LeetCode solutions.
      </p>

      <div class="hero-cta animate-on-scroll">
        <a href="#posts" class="btn btn-primary">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M7 13l3 3 7-7"/>
          </svg>
          Start Learning
        </a>
        <button id="randomProblemBtn" class="btn btn-glass">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
            <polyline points="14 2 14 8 20 8"/>
            <path d="M9.5 8.5h5"/>
            <path d="M9.5 12.5h5"/>
            <path d="M9.5 16.5h5"/>
          </svg>
          Random Problem!
        </button>
      </div>
    </div>

    <div class="scroll-indicator animate-on-scroll">
      <div class="scroll-arrow">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M7 13l3 3 7-7"/>
        </svg>
      </div>
      <span>Scroll to explore</span>
    </div>
  </div>

  <div class="floating-elements">
    <div class="floating-element" style="top: 20%; left: 10%; animation-delay: 0s;"></div>
    <div class="floating-element" style="top: 60%; right: 15%; animation-delay: 2s;"></div>
    <div class="floating-element" style="top: 80%; left: 20%; animation-delay: 4s;"></div>
    <div class="floating-element" style="top: 30%; right: 25%; animation-delay: 1s;"></div>
  </div>
</section>

<style>
  .hero {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    padding: 2rem 0;
  }

  .hero-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    text-align: center;
    position: relative;
    z-index: 10;
  }

  .hero-content {
    max-width: 800px;
    margin: 0 auto;
  }

  .hero-logo {
    margin-bottom: 2rem;
    animation: logoFloat 6s ease-in-out infinite;
  }

  @keyframes logoFloat {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-10px) rotate(2deg); }
  }

  .hero-title {
    font-size: 4.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    letter-spacing: -0.025em;
  }

  .gradient-text {
    background: linear-gradient(135deg, #3b82f6 0%, #14b8a6 50%, #8b45ff 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    animation: gradientShift 8s ease-in-out infinite;
  }

  @keyframes gradientShift {
    0%, 100% { filter: hue-rotate(0deg); }
    50% { filter: hue-rotate(30deg); }
  }

  .hero-tagline {
    font-size: 1.5rem;
    font-weight: 600;
    color: #14b8a6;
    margin-bottom: 2rem;
    letter-spacing: 0.1em;
    text-shadow: 0 0 20px rgba(20, 184, 166, 0.3);
  }

  .hero-description {
    font-size: 1.25rem;
    color: #d1d5db;
    margin-bottom: 3rem;
    line-height: 1.8;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  .hero-cta {
    display: flex;
    gap: 1.5rem;
    justify-content: center;
    flex-wrap: wrap;
    margin-bottom: 4rem;
  }

  .scroll-indicator {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    color: #9ca3af;
    font-size: 0.875rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    animation: scrollBounce 2s ease-in-out infinite;
  }

  .scroll-arrow {
    transform: rotate(90deg);
    color: #14b8a6;
  }

  @keyframes scrollBounce {
    0%, 100% { transform: translateX(-50%) translateY(0px); }
    50% { transform: translateX(-50%) translateY(10px); }
  }

  /* Floating elements for visual depth */
  .floating-elements {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    z-index: 1;
  }

  .floating-element {
    position: absolute;
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background: radial-gradient(circle, rgba(59, 130, 246, 0.1) 0%, transparent 70%);
    animation: float 8s ease-in-out infinite;
  }

  @keyframes float {
    0%, 100% { transform: translateY(0px) translateX(0px) scale(1); opacity: 0.7; }
    25% { transform: translateY(-20px) translateX(10px) scale(1.1); opacity: 0.5; }
    50% { transform: translateY(-10px) translateX(-10px) scale(0.9); opacity: 0.8; }
    75% { transform: translateY(-30px) translateX(5px) scale(1.05); opacity: 0.6; }
  }

  /* Shared button styles (if not already in a global CSS file) */
  .btn {
    /* Base button styles */
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.75rem 1.5rem;
    border-radius: 12px;
    font-weight: 500;
    font-size: 1rem;
    text-decoration: none;
    transition: all 0.3s ease;
    cursor: pointer;
    border: none;
  }

  .btn-primary {
    background: linear-gradient(135deg, #3b82f6, #14b8a6);
    color: #fff;
    box-shadow: 0 5px 15px rgba(59, 130, 246, 0.3);
  }

  .btn-primary:hover {
    box-shadow: 0 8px 20px rgba(59, 130, 246, 0.5);
    transform: translateY(-3px);
  }

  .btn-glass {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: #fff;
  }

  .btn-glass:hover {
    background: rgba(255, 255, 255, 0.2);
    border-color: rgba(255, 255, 255, 0.3);
    transform: translateY(-3px);
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .hero-title {
      font-size: 3rem;
    }

    .hero-tagline {
      font-size: 1.25rem;
    }

    .hero-description {
      font-size: 1.1rem;
      padding: 0 1rem;
    }

    .hero-cta {
      flex-direction: column;
      align-items: center;
    }

    .floating-element {
      width: 60px;
      height: 60px;
    }
  }

  @media (max-width: 480px) {
    .hero-title {
      font-size: 2.5rem;
    }

    .hero-container {
      padding: 0 1rem;
    }
  }

  /* Animation delays for staggered entrance */
  .animate-on-scroll:nth-child(1) { animation-delay: 0.1s; }
  .animate-on-scroll:nth-child(2) { animation-delay: 0.3s; }
  .animate-on-scroll:nth-child(3) { animation-delay: 0.5s; }
  .animate-on-scroll:nth-child(4) { animation-delay: 0.7s; }
  .animate-on-scroll:nth-child(5) { animation-delay: 0.9s; }
  .animate-on-scroll:nth-child(6) { animation-delay: 1.1s; }
</style>

<script>
  // Ensure blogPosts is imported. If this is a component,
  // it needs to be passed as a prop or imported if data is global.
  // For this example, assuming blogPosts can be imported directly.
  import { blogPosts } from '../data/blogPosts.js'; // Adjust path as needed

  document.addEventListener('DOMContentLoaded', () => {
    // Parallax effect
    const heroContent = document.querySelector('.hero-content.parallax');
    if (heroContent) {
      window.addEventListener('scroll', () => {
        const scrollPosition = window.pageYOffset;
        const speed = parseFloat(heroContent.dataset.speed || '0');
        heroContent.style.transform = `translateY(${scrollPosition * speed}px)`;
      });
    }

    // Random Problem Button
    const randomProblemBtn = document.getElementById('randomProblemBtn');
    if (randomProblemBtn) {
      randomProblemBtn.addEventListener('click', () => {
        if (blogPosts.length > 0) {
          const randomIndex = Math.floor(Math.random() * blogPosts.length);
          const randomPost = blogPosts[randomIndex];
          window.location.href = randomPost.url;
        } else {
          console.warn('No blog posts found to select a random problem.');
          alert('No problems available to select randomly!');
        }
      });
    }

    // Intersection observer for animate-on-scroll
    const animateOnScrollElements = document.querySelectorAll('.animate-on-scroll');
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('is-visible');
          // Only unobserve if you want the animation to play once
          // If you want it to play every time it comes into view, remove this line
          observer.unobserve(entry.target);
        } else {
            // Optional: Remove 'is-visible' if you want animation to reset on scroll out
            // entry.target.classList.remove('is-visible');
        }
      });
    }, {
      threshold: 0.1, // Trigger when 10% of the element is visible
      rootMargin: '0px 0px -50px 0px' // Start animation a bit before it enters viewport bottom
    });

    animateOnScrollElements.forEach(element => {
      observer.observe(element);
    });
  });
</script>